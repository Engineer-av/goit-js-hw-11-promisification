{"version":3,"sources":["webpack:///./js/ht-3.js","webpack:///./index.js","webpack:///./js/ht-1.js"],"names":["makeTransaction","transaction","delay","min","max","Math","floor","random","Promise","resolve","reject","setTimeout","canProcess","id","time","logSuccess","console","log","logError","warn","amount","then","catch","ms","logger"],"mappings":"mGAAA,MAIMA,EAAkBC,IACtB,MAAMC,GAL2BC,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAOtC,OAAO,IAAII,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACT,MAAMC,EAAaP,KAAKE,SAAW,GAC7BM,EAAKZ,EAAYY,GAEnBD,GACFH,EAAQ,CAAEI,KAAIC,KAFHZ,IAIbQ,EAAOG,IACNX,MAIDa,EAAa,EAAGF,KAAIC,WACxBE,QAAQC,IAAK,eAAcJ,kBAAmBC,QAG1CI,EAAWL,IACfG,QAAQG,KAAM,gCAA+BN,+BAG/Cb,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETlB,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETlB,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETlB,EAAgB,CAAEa,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,I,yDC1CT,gD,mBCAA,MAAMhB,EAAQqB,GACL,IAAIf,QAAQC,IACjBE,WAAW,KACTF,EAAQc,IACPA,KAIDC,EAASV,GAAQE,QAAQC,IAAK,kBAAiBH,OAGrDZ,EAAM,KAAMmB,KAAKG,GACjBtB,EAAM,KAAMmB,KAAKG,GACjBtB,EAAM,MAAMmB,KAAKG,K","file":"main.9061f4bfc472130e4060.js","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      const id = transaction.id;\n      const time = delay;\n      if (canProcess) {\n        resolve({ id, time });\n      }\n      reject(id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n","import \"./styles.css\";\n\nimport \"./js/ht-1.js\";\nimport \"./js/ht-2.js\";\nimport \"./js/ht-3.js\";\n","const delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n"],"sourceRoot":""}