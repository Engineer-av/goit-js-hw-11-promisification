{"version":3,"sources":["webpack:///./js/ht-2.js","webpack:///./js/ht-3.js","webpack:///./index.js","webpack:///./js/ht-1.js"],"names":["users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","Promise","resolve","logger","result","console","table","then","makeTransaction","transaction","delay","min","max","Math","floor","random","reject","setTimeout","id","logSuccess","time","log","logError","warn","amount","catch","ms"],"mappings":"8EAAA,MAAMA,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KACjC,MAAMC,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAG/D,OAAO,IAAIC,QAAQC,IACjBA,EAAQJ,MAINK,EAASC,GAAUC,QAAQC,MAAMF,GAWvCT,EAAgBH,EAAO,SAASe,KAAKJ,GACrCR,EAAgBH,EAAO,OAAOe,KAAKJ,I,mBC7BnC,MAIMK,EAAkBC,IACtB,MAAMC,GAL2BC,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAOtC,OAAO,IAAIX,QAAQ,CAACC,EAASc,KAC3BC,WAAW,KACUJ,KAAKE,SAAW,GAGjCb,EAAQO,EAAYS,GAAIR,GAExBM,EAAOP,EAAYS,KAEpBR,MAIDS,EAAa,CAACD,EAAIE,KACtBf,QAAQgB,IAAK,eAAcH,kBAAmBE,QAG1CE,EAAWJ,IACfb,QAAQkB,KAAM,gCAA+BL,+BAa/CV,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,MAC/BjB,KAAKY,GACLM,MAAMH,GAETd,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,MAC/BjB,KAAKY,GACLM,MAAMH,GAETd,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,KAC/BjB,KAAKY,GACLM,MAAMH,GAETd,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,MAC/BjB,KAAKY,GACLM,MAAMH,I,yDCpDT,gD,mBCAA,MAAMZ,EAAQgB,GACL,IAAIzB,QAAQC,IACjBe,WAAW,KACTf,EAAQwB,IACPA,KAIDvB,EAASiB,GAAQf,QAAQgB,IAAK,kBAAiBD,OAGrDV,EAAM,KAAMH,KAAKJ,GACjBO,EAAM,KAAMH,KAAKJ,GACjBO,EAAM,MAAMH,KAAKJ,K","file":"main.79360a044b263a8ae7d0.js","sourcesContent":["const users = [\n  { name: \"Mango\", active: true },\n  { name: \"Poly\", active: false },\n  { name: \"Ajax\", active: true },\n  { name: \"Lux\", active: false }\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user\n  );\n\n  return new Promise(resolve => {\n    resolve(updatedUsers);\n  });\n};\n\nconst logger = result => console.table(result);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, \"Mango\", logger);\n// toggleUserState(users, \"Lux\", logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, \"Mango\").then(logger);\ntoggleUserState(users, \"Lux\").then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n","import \"./styles.css\";\n\nimport \"./js/ht-1.js\";\nimport \"./js/ht-2.js\";\nimport \"./js/ht-3.js\";\n","const delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n"],"sourceRoot":""}